# -*- coding: utf-8 -*-
"""whatsapp group chat analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QKQ73rXH-je12c0aBgbe8sZ3bqWNiRzu
"""

pip install emojis

# Commented out IPython magic to ensure Python compatibility.
import re
import regex
import pandas as pd
import numpy as np
import emoji
import plotly.express as px
from collections import Counter
import matplotlib.pyplot as plt
from os import path
from PIL import Image
import datetime
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
# %matplotlib inline

def date(l):
    pattern = '^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)(\d{2}|\d{4}), ([0-9][0-9]):([0-9][0-9]) -'
    result = re.match(pattern, l)
    if result:
        return True
    return False

def isauthor(l):
    pattern = [
        '([\w]+):', 
        '([\w]+[\s]+[\w]+):',
        '([\w]+[\s]+[\w]+[\s]+[\w]+):',
        '([+]\d{2} \d{5} \d{5}):'
    ]
    patterns = '^' + '|'.join(pattern)
    result = re.match(patterns, l)
    if result:
        return True
    return False

def DataPoint(line):
    SplitLine = line.split(' - ')
    DT = SplitLine[0]
    DateTime = DT.split(', ')
    Date = DateTime[0]
    Time = DateTime[1]
    Message = ' '.join(SplitLine[1:])
    
    if isauthor(Message):
        authormes = Message.split(': ')
        Author = authormes[0]
        Message = ' '.join(authormes[1:])
    else:
        Author = None
    return Date, Time, Author, Message

parsedData = []
FilePath = '/content/WhatsApp Chat with Group 7.txt'
with open(FilePath) as fp:
        
    messageBuffer = []
    Date, Time, Author = None, None, None
    
    while True:
        line = fp.readline() 
        if not line:
            break
        line = line.strip() 
        if date(line): 
            if len(messageBuffer) > 0:
                parsedData.append([Date, Time, Author,' '.join(messageBuffer)])
            messageBuffer.clear() 
            Date, Time, Author, Message = DataPoint(line)
            messageBuffer.append(Message)
        else:
            messageBuffer.append(line)

df = pd.DataFrame(parsedData, columns=['Date', 'Time', 'Author', 'Message'])
df

### Checking shape of dataset.
df.shape
### Checking basic information of dataset
df.info()
### Checking no. of null values in dataset
df.isnull().sum()
### Checking head part of dataset
df.head(50)
### Checking tail part of dataset
df.tail(50)
df = df.reset_index(drop=True)
df.shape
### Checking no. of authors of group
df['Author'].nunique()
### Checking authors of group
df['Author'].unique()

### Rearranging the columns for better understanding
df = df[['Date','Time','Author','Message']]
### Looking newborn dataset.
df.head()
### Counting number of letters in each message
df["Letter's"] = df["Message"].apply(lambda s : len(s))
### Counting number of word's in each message
df["Word's"] = df["Message"].apply(lambda s : len(s.split(' ')))
### Function to count number of links in dataset, it will add extra column and store information in it.
URLPATTERN = r'(https?://S+)'
df['Url_Count'] = df.Message.apply(lambda x: re.findall(URLPATTERN, x)).str.len()
links = np.sum(df.Url_Count)


### Looking updated dataset
df

NoneValues = df[df['Author'].isnull()]
NoneValues

total_messages = df.shape[0]
media_messages = df[df['Message'] == '<Media omitted>'].shape[0]

print('Group Chatting Stats : ')
print('Total Number of Messages : {}'.format(total_messages))
print('Total Number of Media Messages : {}'.format(media_messages))

df = df.drop(NoneValues.index)

df

"""Letâ€™s create a time series plot w.r.t. no. of messages : """

z = df['Date'].value_counts() 
z1 = z.to_dict() #converts to dictionary
df['Msg_count'] = df['Date'].map(z1)
### Timeseries plot 
fig = px.line(x=df['Date'],y=df['Msg_count'])
fig.update_layout(title="Analysis of number of message's using TimeSeries plot.", xaxis_title='Month', yaxis_title='No. of Messages')
fig.update_xaxes(nticks=20)
fig.show()

"""Analysing Number of Messages Sent by the Group Members"""

Toppers = df['Author'].value_counts()
Toppers.plot(kind='bar')

"""Analysing the Number of Media Messages Sent by the Group Members"""

MediaValues = df[df['Message'] == '<Media omitted>']
MediaValues

MediaTopper = MediaValues['Author'].value_counts()
MediaTopper.plot(kind='bar', color='m')

""" Frequently used Emojis by the Group Members"""

emojis_new=[]
for word in df['Message']:
          emojis = emoji.distinct_emoji_list(word)
          emojis_new.extend([emoji.demojize(is_emoji) for is_emoji in emojis])
          
emojis_new

"""Total Message Count"""

df['Month_year'] = df['Date']
TopMonth = df['Month_year'].value_counts()
TopMonth = TopMonth.sort_index()
TopMonth.plot(kind='bar', color='salmon')

TopDate = df['Date'].value_counts().head(25)
TopDate.plot(kind='bar', color='firebrick')

"""Active hours of the WhatsApp Group"""

df['Hour'] = df['Time'].apply(lambda a : a.split(':')[0])
TopHours = df['Hour'].value_counts()
TopHours = TopHours.sort_index()
TopHours.plot(kind='bar', color='orange')

"""Finding the Letter and Word Count from Each Message"""

df = df.drop(MediaValues.index)
df['Letters'] = df['Message'].apply(lambda s : len(s))
df['WordCount'] = df['Message'].apply(lambda s : len(s.split(" ")))

df

"""Analysing Which Group Member Has Highest Letter and Word Count"""

GroupedData = df.groupby(['Author']).sum()
LetterGroupedData = GroupedData.sort_values(by=['Letters'])
WordGroupedData = GroupedData.sort_values(by=['WordCount'])

WordGroupedData

LetterGroupedData['Letters'].plot(kind='bar', color='hotpink')

WordGroupedData['WordCount'].plot(kind='bar', color='teal')

"""WhatsApp Group Chat Analysis: Word Cloud"""

#Now, I will create a Word Cloud for our WhatsApp Group Chat Analysis, to see what the group is based on.
#A Word Cloud is a graph of words which shows the most used words by representing the most used words bigger than the rest:

text = " ".join(review for review in df.Message)
print ("There are {} words in all the messages.".format(len(text)))
stopwords = set(STOPWORDS)
# Generate a word cloud image
wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)
# Display the generated image:
# the matplotlib way:
plt.figure( figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

"""The above Word Cloud is based on the chats of the whole group. Now I will look at the Author wise WordCloud:"""

l = ["Rashi","Rashmi","Pratheek", "Praneeth Raj","Meghana"]
for i in range(len(l)):
  dummy_df = df[df['Author'] == l[i]]
  text = " ".join(review for review in dummy_df.Message)
  stopwords = set(STOPWORDS)
  #Generate a word cloud image
  print('Author name',l[i])
  wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)
  #Display the generated image   
  plt.figure( figsize=(10,5))
  plt.imshow(wordcloud, interpolation='bilinear')
  plt.axis("off")
  plt.show()